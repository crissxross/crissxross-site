/* LAYOUT PRIMITIVES based on Every Layout https://every-layout.dev/layouts/ - I've adapted the naming conventions to make things clearer for my purposes */

/* TODO - copied from old crissxross - REPLACE or ADAPT for crissxross-site */

/************ LAYOUT PRIMITIVES **************/

/* box-sizing overrides to content-box so that if left & right padding is needed, it won't take away from the --measure maximum width */
.center-measure {
  box-sizing: content-box;
  margin-inline: auto;
  max-inline-size: var(--measure);
  padding-inline: var(--space-s);
  /* outline: 1px solid green; */
}

.stack {
  --space: var(--space-m);
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}
.stack > * {
  margin-block-start: 0;
  margin-block-end: 0;
}
.stack > * + * {
  margin-block-start: var(--space);
}

.grid-auto {
  display: grid;
  gap: var(--space-s);
}
@supports (width: min(250px, 100%)) {
  .grid-auto {
    grid-template-columns: repeat(
      auto-fit, minmax(min(250px, 100%), 1fr)
    );
  }
}
/* ðŸ‘† min() calculates the shortest length from a set of comma-separated values */
/* so if viewport is narrower than 250px, it goes to 100% */
/* @supports because a few mobile browsers don't yet support min() */
/* See https://every-layout.dev/layouts/grid/#the-solution */

/* S.Eckles solution ðŸ‘‡ - from https://moderncss.dev/modern-css-for-dynamic-component-based-architecture/ */
.layout-grid {
  --layout-grid-min: 30ch;
  --layout-grid-gap: var(--space-s);
  display: grid;
  grid-template-columns: repeat(
    auto-fit,
    minmax(min(100%, var(--layout-grid-min)), 1fr)
  );
  gap: var(--layout-grid-gap);
}

/* TODO: include or consider S.Eckles' solution for flex-layout-grid here:  */
/* https://moderncss.dev/modern-css-for-dynamic-component-based-architecture/#css-flexbox-layout */

/************ LAYOUT UTILITIES *************/

/* similar to stack layout primitive but for normal flow */
.flow > * + * {
  margin-block-start: var(--flow-space, 1em);
}
/* ALTERNATIVE FLOW */
/* .flow > *:not(:first-child) {
    margin-block-start: var(--flow-space, 1em);
} */

/* NOTE: container is good for auto-grid of cards */
.container {
  /* individually set so they can be individually overwritten */
  padding-block-start: var(--space-m);
  padding-block-end: var(--space-m);
  padding-inline-start: var(--space-m);
  padding-inline-end: var(--space-m);
}

.full-bleed {
  width: 100vw;
  margin-inline-start: calc(50% - 50vw);
}
/* to use with full bleed for consistent centred content - see https://piccalil.li/tutorial/creating-a-full-bleed-css-utility */
.wrapper {
  max-inline-size: var(--width, 60rem);
  margin-inline: auto;
  padding-inline: var(--pad, 0);
}

.full-width {
  width: min(100% - var(--inline-margin, 2rem));
  margin-inline: auto;
}
