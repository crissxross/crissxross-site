---
// code adapted from https://github.com/coding-in-public/astro-component-example-btn/tree/main

import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"button"> {
  type?: "button" | "submit";
  size?: "sm" | "md" | "lg";
  theme?:
    | "primary"
    | "secondary"
    | "accent"
    | "light"
    | "dark";
  classes?: string;
}

const {
  type = "button",
  size = "md",
  theme = "light",
  classes,
  ...rest
} = Astro.props;

const background = `var(--${theme})`;
const foreground = theme === "light" ? "var(--primary)" : "var(--light)";
---

<!-- TODO: Finish this button component - BUT do I need .button class most of the time -->

<style
  define:vars={{
    foreground,
    background,
  }}
>
  :root {
    --primary: var(--link-color);
    --secondary: teal;
    --accent: var(--color-bright);
    --light: var(--gray-0);
    --dark: var(--gray-14);
  }

  button {
    /* resets */
    font: inherit;
    cursor: pointer;

    /* variables */
    --bkg: var(--background);
    --color: var(--foreground);

    /* default styles */
    display: flex;
    gap: 0.2em;
    align-items: center;
    background-color: var(--bkg);
    color: var(--color);
    border: none;
    border-radius: 0.25em;
    padding: 0.4em 1.25em;
    transition: box-shadow 0.2s cubic-bezier(0.075, 0.82, 0.165, 1),
      opacity 0.2s cubic-bezier(0.075, 0.82, 0.165, 1),
      scale 0.2s cubic-bezier(0.075, 0.82, 0.165, 1);
  }

  button:focus {
    outline-color: transparent;
  }

  button:hover {
    scale: 1.05;
    filter: brightness(120%);
  }

  button:focus-visible {
    box-shadow: 0 0 0 0.1em var(--light), 0 0 0 0.3em var(--bkg);
  }

  [data-size="sm"] {
    font-size: 0.8rem;
  }
  [data-size="md"] {
    font-size: 1.1rem;
  }
  [data-size="lg"] {
    font-size: 1.5rem;
  }
</style>

<button
  class:list={[classes]}
  {type}
  data-size={size}
  {...rest}
>
  <slot />
</button>
